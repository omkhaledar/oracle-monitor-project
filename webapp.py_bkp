# Save this file as webapp.py in your project's root directory (e.g., /u01/genspark/)
import json
import logging
from flask import Flask, render_template_string, jsonify
from datetime import datetime

# Configure Flask app
app = Flask(__name__)

# --- HTML Template with Tailwind CSS and JavaScript ---
# This is our user interface. It will auto-refresh every 10 seconds.
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oracle Alert Log Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { background-color: #f0f2f5; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; }
        .criticality-Critical { border-left-color: #ef4444; }
        .criticality-High { border-left-color: #f97316; }
        .criticality-Medium { border-left-color: #f59e0b; }
        .criticality-Low { border-left-color: #84cc16; }
        .criticality-Informational { border-left-color: #3b82f6; }
    </style>
</head>
<body class="p-4 sm:p-6 md:p-8">
    <div class="max-w-7xl mx-auto">
        <header class="flex justify-between items-center mb-6">
            <div>
                <h1 class="text-3xl font-bold text-gray-800">Oracle Alert Log Dashboard</h1>
                <p class="text-gray-500">Real-time AI analysis of database errors</p>
            </div>
            <div class="text-right">
                 <p class="text-sm text-gray-500">Last Updated</p>
                 <p id="last-updated" class="font-semibold text-gray-700"></p>
            </div>
        </header>

        <main id="dashboard-content" class="space-y-6">
            <!-- Server data will be dynamically inserted here -->
        </main>
    </div>

    <script>
        // This function builds the HTML for each error analysis
        function createAnalysisCard(analysis) {
            // Determine text color based on criticality for better visibility
            const criticalityColors = {
                'Critical': 'text-red-600',
                'High': 'text-orange-600',
                'Medium': 'text-amber-600',
                'Low': 'text-lime-600',
                'Informational': 'text-blue-600'
            };
            const textColor = criticalityColors[analysis.criticality] || 'text-gray-700';

            return `
                <div class="bg-white p-4 rounded-lg shadow-sm border-l-4 criticality-${analysis.criticality}">
                    <p class="text-sm text-gray-500 font-mono break-all mb-2">${analysis.error_line}</p>
                    <div class="space-y-2 text-sm">
                        <p><strong>Explanation:</strong> ${analysis.explanation}</p>
                        <p><strong>Recommended Action:</strong> ${analysis.recommended_action}</p>
                        <div class="flex justify-between items-center pt-2">
                           <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-xs font-semibold text-gray-700">
                                Criticality: <span class="font-bold ${textColor}">${analysis.criticality}</span>
                           </span>
                           <span class="text-xs text-gray-400">${new Date(analysis.timestamp).toLocaleString()}</span>
                        </div>
                    </div>
                </div>
            `;
        }

        // This function fetches data and updates the dashboard
        async function updateDashboard() {
            try {
                const response = await fetch('/api/data');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                const contentDiv = document.getElementById('dashboard-content');
                
                // Clear previous content
                contentDiv.innerHTML = '';

                // Update the 'Last Updated' timestamp
                document.getElementById('last-updated').textContent = new Date().toLocaleTimeString();

                if (Object.keys(data).length === 0) {
                    contentDiv.innerHTML = '<div class="text-center p-10 bg-white rounded-lg shadow-sm"><p class="text-gray-500">No data available. Run the monitor script to generate results.</p></div>';
                    return;
                }

                let hasErrors = false;
                // Iterate over each server in the data
                for (const serverName in data) {
                    const analyses = data[serverName];
                    
                    // Create a container for the server
                    const serverContainer = document.createElement('div');
                    serverContainer.className = 'bg-white rounded-xl shadow-md overflow-hidden';
                    
                    // Create the server header
                    let serverHeader = `<div class="p-4 border-b border-gray-200">
                                            <h2 class="text-xl font-semibold text-gray-700">${serverName}</h2>
                                        </div>`;

                    // Create the body with error cards
                    let serverBody = '<div class="p-4 space-y-4">';
                    if (analyses.length > 0) {
                        hasErrors = true;
                        analyses.forEach(analysis => {
                            serverBody += createAnalysisCard(analysis);
                        });
                    } else {
                        serverBody += '<p class="text-sm text-gray-500 px-2">No new errors found for this server.</p>';
                    }
                    serverBody += '</div>';

                    serverContainer.innerHTML = serverHeader + serverBody;
                    contentDiv.appendChild(serverContainer);
                }

                if (!hasErrors) {
                    const noErrorsCard = document.createElement('div');
                    noErrorsCard.className = 'text-center p-10 bg-white rounded-lg shadow-sm';
                    noErrorsCard.innerHTML = '<p class="text-2xl text-green-500 font-semibold">âœ… All systems clear. No new errors found across all servers.</p>';
                    contentDiv.prepend(noErrorsCard);
                }


            } catch (error) {
                console.error('Failed to fetch dashboard data:', error);
                const contentDiv = document.getElementById('dashboard-content');
                contentDiv.innerHTML = '<div class="text-center p-10 bg-red-100 text-red-700 rounded-lg shadow-sm"><p>Error loading dashboard data. Please check the console and ensure the backend is running.</p></div>';
            }
        }

        // Update the dashboard every 10 seconds (10000 milliseconds)
        setInterval(updateDashboard, 10000);

        // Initial load when the page is opened
        document.addEventListener('DOMContentLoaded', updateDashboard);
    </script>
</body>
</html>
"""

# --- API Endpoint to Serve Data ---
# This endpoint reads the JSON file and sends it to the frontend.
@app.route('/api/data')
def get_data():
    """Reads and returns the content of monitoring_results.json."""
    try:
        with open('monitoring_results.json', 'r') as f:
            data = json.load(f)
        return jsonify(data)
    except FileNotFoundError:
        # If the file doesn't exist, return an empty object
        logging.warning("monitoring_results.json not found. The monitor script may not have run yet.")
        return jsonify({})
    except Exception as e:
        logging.error(f"Error reading data file: {e}")
        return jsonify({"error": "Could not read data file."}), 500

# --- Main Route to Render the Dashboard ---
@app.route('/')
def dashboard():
    """Renders the main HTML dashboard page."""
    return render_template_string(HTML_TEMPLATE)

# --- Main execution ---
if __name__ == '__main__':
    # Set up basic logging for the web server
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    # Run the Flask app. It will be accessible on all network interfaces on port 5001.
    # Using a different port (5001) is good practice.
    # `debug=True` is helpful for development as it auto-reloads on changes.
    app.run(host='0.0.0.0', port=5001, debug=True)


